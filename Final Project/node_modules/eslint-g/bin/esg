#!/usr/bin/env node

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const program = require('commander');
const ora = require('ora');
const browserrc = require('../rc/browserrc');
const noderc = require('../rc/noderc');
const vuerc = require('../rc/vuerc');
const reactrc = require('../rc/reactrc');
require('colors');

let way = 'npm';
let rc = noderc;

program
  .version(require('../package.json').version)
  .option('-r, --rule [rule]', 'rules of eslint')
  .option('-i, --install [npm | yarn | cnpm]', 'the installer to install eslint plugins')
  .option('--no-plugins', 'Only generate rules file, do not install plugins.')
  .parse(process.argv);

if (program.rule) {
  switch (program.rule) {
    case 'b':
    case 'browser':
      rc = browserrc;
      break;
    case 'r':
    case 'react':
      rc = reactrc;
      break;
    case 'v':
    case 'vue':
      rc = vuerc;
      break;
    case 'n':
    case 'node':
    default:
      rc = noderc;
      break;
  }
}


if (program.install) {
  switch (program.install) {
    case 'yarn':
      way = 'yarn';
      break;
    case 'cnpm':
      way = 'cnpm';
      break;
    case 'npm':
    default:
      break;
  }
}

install(rc, way);

function install(_rc, _way) {
  if (['npm', 'yarn', 'cnpm'].indexOf(_way) < 0) {
    _way = 'npm';
  }

  Promise.all([
    writeFile(_rc.ignore, path.resolve() + '/.eslintignore'),
    writeFile(_rc.rc, path.resolve() + '/.eslintrc'),
  ]).then(() => {

    console.log('generated .eslintrcignore'.green);
    console.log('generated .eslintrc'.green);
    if (program.plugins) {

      installPlugins(_rc.plugins, _way);
    }
  }).catch(e => {
    console.log(e.red);
  });
}


function writeFile(content, file) {
  return new Promise((resolve, reject) => {
    fs.writeFile(file, content, (e) => {
      if (e) {
        reject(e);
      }
      resolve();
    });
  });
}


function installPlugins(plugins, _way) {
  const spinner = ora('Downloading eslint plugins');
  spinner.start();
  const ways = {
    npm() {
      exec('npm i -D ' + plugins.join(' '), callback);
    },

    cnpm() {
      exec('cnpm i -D ' + plugins.join(' '), callback);
    },

    yarn() {
      exec('yarn add ' + plugins.join(' '), callback);
    },
  };

  try {
    ways[_way]();
  } catch (error) {
    spinner.stop();
    console.log('ways error');
    console.log(error.red);
  }

  function callback(err, stdout, stderr) {
    spinner.stop();
    if (err) { console.log(err); return; }
    console.log(stdout);
    if (stderr) { console.log(stderr); }
  }
}
